{"ast":null,"code":"const inputs = [{\n  id: 1,\n  name: \"name\",\n  type: \"text\",\n  placeholder: \"product name\",\n  label: \" Name\",\n  pattern: \"^[a-zA-Z0-9]{4,16}$\",\n  errorMessage: \"Product name should be 4-16 characters and shouldn't include any special character\",\n  required: true\n}, {\n  id: 2,\n  name: \"quantity\",\n  type: \"number\",\n  placeholder: \"product quantity\",\n  label: \" Quantity\",\n  pattern: \"^[1-9][0-9]*$\",\n  errorMessage: \"The product quantity must be positif integers only, starting from 1. Quantities like 1, 10, 100, etc.\",\n  required: true\n}, {\n  id: 3,\n  name: \"price\",\n  type: \"number\",\n  placeholder: \"Product price\",\n  label: \" Price\",\n  pattern: \"^[0-9]+(?:\\.[0-9]{1,2})?$\",\n  errorMessage: \"The product price must be positive decimal numbers with up to 2 decimal places \",\n  required: true\n}];\nexport { inputs };","map":{"version":3,"names":["inputs","id","name","type","placeholder","label","pattern","errorMessage","required"],"sources":["C:/Users/asmaa/Downloads/product_crud/product_frontend/src/constants/index.js"],"sourcesContent":["const inputs=[\r\n    {\r\n    id:1 , \r\n    name:\"name\", \r\n    type:\"text\",\r\n    placeholder:\"product name\" ,  \r\n    label :\" Name\", \r\n    pattern: \"^[a-zA-Z0-9]{4,16}$\",\r\n    errorMessage: \"Product name should be 4-16 characters and shouldn't include any special character\",\r\n    required:true,\r\n  },\r\n    {\r\n    id:2 , \r\n    name:\"quantity\", \r\n    type:\"number\",\r\n    placeholder:\"product quantity\" ,  \r\n    label :\" Quantity\",\r\n    pattern:\"^[1-9][0-9]*$\",\r\n    errorMessage:\"The product quantity must be positif integers only, starting from 1. Quantities like 1, 10, 100, etc.\",\r\n    required:true,\r\n\r\n    },\r\n    {\r\n      id:3 , \r\n      name:\"price\", \r\n      type:\"number\",\r\n      placeholder:\"Product price\" ,  \r\n      label :\" Price\", \r\n      pattern:\"^[0-9]+(?:\\.[0-9]{1,2})?$\",\r\n      errorMessage:\"The product price must be positive decimal numbers with up to 2 decimal places \",\r\n      required:true,\r\n    }\r\n  ]\r\n  export {inputs }"],"mappings":"AAAA,MAAMA,MAAM,GAAC,CACT;EACAC,EAAE,EAAC,CAAC;EACJC,IAAI,EAAC,MAAM;EACXC,IAAI,EAAC,MAAM;EACXC,WAAW,EAAC,cAAc;EAC1BC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,qBAAqB;EAC9BC,YAAY,EAAE,oFAAoF;EAClGC,QAAQ,EAAC;AACX,CAAC,EACC;EACAP,EAAE,EAAC,CAAC;EACJC,IAAI,EAAC,UAAU;EACfC,IAAI,EAAC,QAAQ;EACbC,WAAW,EAAC,kBAAkB;EAC9BC,KAAK,EAAE,WAAW;EAClBC,OAAO,EAAC,eAAe;EACvBC,YAAY,EAAC,uGAAuG;EACpHC,QAAQ,EAAC;AAET,CAAC,EACD;EACEP,EAAE,EAAC,CAAC;EACJC,IAAI,EAAC,OAAO;EACZC,IAAI,EAAC,QAAQ;EACbC,WAAW,EAAC,eAAe;EAC3BC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAC,2BAA2B;EACnCC,YAAY,EAAC,iFAAiF;EAC9FC,QAAQ,EAAC;AACX,CAAC,CACF;AACD,SAAQR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}